name: Dependency Check

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  schedule:
    - cron: '0 3 * * 1' # Every Monday at 03:00 UTC

permissions:
  contents: read
  actions: write

jobs:
  depcheck:
    runs-on: ubuntu-latest
    timeout-minutes: 45

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '17'
          cache: maven  # This caches ~/.m2/repository between runs

      - name: Install all modules first (resolve inter-module deps)
        run: |
          # Build and install all modules (including issue-events) to local .m2
          mvn -B -T 1C -fae \
            -DskipTests \
            -Dmaven.javadoc.skip=true \
            -Dcheckstyle.skip=true \
            -Dspotbugs.skip=true \
            -Djacoco.skip=true \
            clean install

      - name: Run OWASP Dependency-Check (Maven)
        run: |
          mvn -B org.owasp:dependency-check-maven:check \
            -Dformat=JSON \
            -Dformat=HTML \
            -DfailBuildOnCVSS=7 \
            -DlogFile=dependency-check.log

      - name: Collect Dependency-Check reports
        if: always()
        run: |
          mkdir -p depcheck-artifacts
          # Find and copy all dependency-check reports from every module
          while IFS= read -r d; do
            mod=$(echo "$d" | sed -E 's#^\./([^/]+).*#\1#')
            mkdir -p "depcheck-artifacts/$mod"
            cp -a "$d"/* "depcheck-artifacts/$mod/" || true
          done < <(find . -type d -path '*/target/dependency-check-report')
          # List collected files for debugging
          find depcheck-artifacts -type f -printf '%P\n' | sort || true

      - name: Upload Dependency-Check artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-reports
          path: depcheck-artifacts
          if-no-files-found: warn
          retention-days: 7

  trigger-codeql:
    name: ðŸ”— Trigger CodeQL
    needs: depcheck
    runs-on: ubuntu-latest
    if: success()
    
    steps:
      - name: Trigger CodeQL Workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'codeql.yml',
              ref: context.ref
            });
            console.log('âœ… CodeQL workflow triggered')