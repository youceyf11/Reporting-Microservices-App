name: Deploy Infrastructure with Terraform

on:
  workflow_call:
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      EC2_INSTANCE_ID:
        required: true
      SSH_USER:
        required: true
      SSH_KEY:
        required: true
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'free-tier'
        type: choice
        options:
        - free-tier
      action:
        description: 'Terraform action'
        required: true
        default: 'apply'
        type: choice
        options:
        - plan
        - apply
        - destroy

env:
  AWS_REGION: eu-central-1
  TF_VERSION: 1.6.0

jobs:
  terraform:
    name: 'Terraform ${{ github.event.inputs.action }}'
    runs-on: ubuntu-latest
    
    defaults:
      run:
        shell: bash
        working-directory: ./terraform

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Terraform Format Check
      run: terraform fmt -check -recursive
      continue-on-error: true

    - name: Terraform Init
      run: terraform init

    - name: Terraform Validate
      run: terraform validate

    - name: Terraform Plan
      if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
      run: |
        terraform plan \
          -var-file="${{ github.event.inputs.environment }}.tfvars" \
          -out=tfplan \
          -no-color
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Terraform Apply
      if: github.event.inputs.action == 'apply'
      run: |
        terraform apply \
          -auto-approve \
          tfplan

    - name: Terraform Destroy
      if: github.event.inputs.action == 'destroy'
      run: |
        terraform destroy \
          -var-file="${{ github.event.inputs.environment }}.tfvars" \
          -auto-approve
      env:
        TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

    - name: Output Infrastructure Info
      if: github.event.inputs.action == 'apply'
      run: |
        echo "## Infrastructure Deployed Successfully! " >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Access Information:" >> $GITHUB_STEP_SUMMARY
        echo "- **Load Balancer URL:** $(terraform output -raw load_balancer_url)" >> $GITHUB_STEP_SUMMARY
        echo "- **ECS Cluster:** $(terraform output -raw ecs_cluster_name)" >> $GITHUB_STEP_SUMMARY
        echo "- **Region:** ${{ env.AWS_REGION }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
        echo "1. Push Docker images to ECR repositories" >> $GITHUB_STEP_SUMMARY
        echo "2. ECS services will automatically pull and deploy the images" >> $GITHUB_STEP_SUMMARY
        echo "3. Monitor deployment in AWS ECS Console" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ECR Repository URLs:" >> $GITHUB_STEP_SUMMARY
        terraform output -json ecr_repository_urls | jq -r 'to_entries[] | "- **\(.key):** \(.value)"' >> $GITHUB_STEP_SUMMARY

    - name: Save Terraform State Info
      if: github.event.inputs.action == 'apply'
      run: |
        echo "LOAD_BALANCER_URL=$(terraform output -raw load_balancer_url)" >> $GITHUB_ENV
        echo "ECS_CLUSTER_NAME=$(terraform output -raw ecs_cluster_name)" >> $GITHUB_ENV
