name: CI/CD - Reporting Logistics App

on:
  push:
    branches:
      - '**'
    tags:
      - '*'
  pull_request:
    branches:
      - '**'
  workflow_dispatch:
    inputs:
      reason:
        description: "Reason for manual run"
        required: false
        default: "manual-trigger"

env:
  REGISTRY: ghcr.io
  JAVA_VERSION: '17'

permissions:
  contents: read
  packages: write
  security-events: write
  checks: write
  actions: write

# √âvite les builds en parall√®le sur la m√™me branche
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

jobs:
  # =================================== 
  # 1. Build & Test (avec services natifs)
  # ===================================
  build-test:
    name: üõ†Ô∏è Build and Test All Modules
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_DB: jira_db
          POSTGRES_USER: jira
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 20

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping || exit 1" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 12

      rabbitmq:
        image: rabbitmq:3-management-alpine
        env:
          RABBITMQ_DEFAULT_USER: ci
          RABBITMQ_DEFAULT_PASS: ci
        ports:
          - 5672:5672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q ping" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 12

      zookeeper:
        image: confluentinc/cp-zookeeper:7.4.0
        env:
          ZOOKEEPER_CLIENT_PORT: 2181
          ZOOKEEPER_TICK_TIME: 2000
        ports:
          - 2181:2181
        options: >-
          --health-cmd "nc -z localhost 2181" 
          --health-interval 10s 
          --health-timeout 5s 
          --health-retries 12

      kafka:
        image: confluentinc/cp-kafka:7.4.0
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
          KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
        ports:
          - 9092:9092
        options: >-
          --health-cmd "kafka-topics --bootstrap-server localhost:9092 --list" 
          --health-interval 15s 
          --health-timeout 10s 
          --health-retries 12

    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4

      - name: üì¶ Cache Maven dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.m2/repository
            ~/.m2/wrapper
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml', '.mvn/wrapper/maven-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: ‚öôÔ∏è Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}

      - name: ‚è≥ Wait for services to be ready
        timeout-minutes: 3
        run: |
          echo "üîÑ Waiting for services to be ready..."
          for i in {1..90}; do
            if nc -z localhost 5432 && \
               nc -z localhost 6379 && \
               nc -z localhost 5672 && \
               nc -z localhost 2181 && \
               nc -z localhost 9092; then
              echo "‚úÖ All services are ready!"
              break
            fi
            echo "‚è≥ Waiting... (attempt $i/90)"
            sleep 2
          done
          
          # Final verification
          echo "üîç Services status:"
          nc -z localhost 5432 && echo "‚úÖ PostgreSQL" || echo "‚ùå PostgreSQL"
          nc -z localhost 6379 && echo "‚úÖ Redis" || echo "‚ùå Redis"
          nc -z localhost 5672 && echo "‚úÖ RabbitMQ" || echo "‚ùå RabbitMQ"
          nc -z localhost 2181 && echo "‚úÖ Zookeeper" || echo "‚ùå Zookeeper"
          nc -z localhost 9092 && echo "‚úÖ Kafka" || echo "‚ùå Kafka"

      - name: üèóÔ∏è Build and Test (Maven)
        run: |
          mvn -B -T 1C -fae \
            -Dspring.profiles.active=ci \
            -Dmaven.repo.local=$HOME/.m2/repository \
            clean verify

      - name: üìä Generate test summary
        if: always()
        run: |
          echo "üìä Test Results Summary:" > test-summary.md
          find . -name "TEST-*.xml" -path "*/surefire-reports/*" | while read file; do
            if [ -f "$file" ]; then
              echo "Found test report: $file"
            fi
          done

      - name: üìÅ Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ github.run_id }}
          path: |
            **/target/surefire-reports/*.xml
            **/target/failsafe-reports/*.xml
            **/target/site/jacoco/jacoco.xml
          retention-days: 7
          if-no-files-found: warn

      - name: üìÅ Upload JARs for reuse
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: jars-${{ github.run_id }}
          path: |
            **/target/*.jar
            !**/target/*-sources.jar
            !**/target/*-javadoc.jar
          retention-days: 3
          if-no-files-found: error

      # OWASP Dependency Check - Solution Maven directe
      - name: üîç Run OWASP Dependency Check
        run: |
          echo "üîÑ Running OWASP Dependency Check with Maven..."
          mkdir -p reports
          mvn -B dependency-check:aggregate \
            -Ddependency-check.skip=false \
            -DfailOnError=false \
            -DoutputDirectory=reports \
            -Dformats=HTML,JSON \
            -DfailBuildOnCVSS=0 \
            -DnvdValidForHours=24
          
          # V√©rifier si les rapports ont √©t√© g√©n√©r√©s
          if [ -f "reports/dependency-check-report.html" ]; then
            echo "‚úÖ Security report generated successfully"
          else
            echo "‚ö†Ô∏è Searching for reports in target directories..."
            find . -name "dependency-check-report.*" -exec cp {} reports/ \; 2>/dev/null || true
          fi
        continue-on-error: true

      - name: üìÅ Upload security report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-report-${{ github.run_id }}
          path: |
            reports/dependency-check-report.html
            reports/dependency-check-report.json
          retention-days: 7
          if-no-files-found: warn

  # ===================================
  # 2. Docker Images (Build & Push)
  # ===================================
  docker-images:
    name: üê≥ Build and Push Docker Images
    needs: build-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: üîç Checkout code
        uses: actions/checkout@v4

      - name: üì• Download JARs
        uses: actions/download-artifact@v4
        with:
          name: jars-${{ github.run_id }}
          path: ./

      - name: üê≥ Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üîê Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üß± Build Docker images
        run: |
          TAG=${GITHUB_SHA::7}
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          # Services √† build
          services=(
            "jira-fetch-service"
            "reporting-service"
            "chart-service"
            "email-service"
            "excel-service"
            "gateway-service"
            "discovery-service"
          )
          
          for svc in "${services[@]}"; do
            # Dockerfile path
            DF="./$svc/Dockerfile"
            if [ "$svc" = "jira-fetch-service" ]; then
              DF="./jira-fetch-service/dockerfile"
            fi
            
            # V√©rifier que le Dockerfile existe
            if [ ! -f "$DF" ]; then
              echo "‚ö†Ô∏è  Warning: $DF not found, skipping $svc"
              continue
            fi
            
            echo "üèóÔ∏è  Building $svc..."
            docker build -f "$DF" \
              -t ${{ env.REGISTRY }}/$OWNER_LC/$svc:$TAG \
              -t ${{ env.REGISTRY }}/$OWNER_LC/$svc:latest \
              ./$svc || {
                echo "‚ùå Failed to build $svc"
                exit 1
              }
          done

      - name: üöö Push Docker images
        run: |
          TAG=${GITHUB_SHA::7}
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          
          services=(
            "jira-fetch-service"
            "reporting-service"
            "chart-service"
            "email-service"
            "excel-service"
            "gateway-service"
            "discovery-service"
          )
          
          # Fonction de retry pour Docker push
          push_with_retry() {
            local image=$1
            local max_attempts=3
            local attempt=1
            
            while [ $attempt -le $max_attempts ]; do
              echo "üì§ Pushing $image (attempt $attempt/$max_attempts)..."
              if docker push "$image"; then
                echo "‚úÖ Successfully pushed $image"
                return 0
              else
                echo "‚ùå Push failed for $image (attempt $attempt/$max_attempts)"
                if [ $attempt -lt $max_attempts ]; then
                  echo "‚è≥ Waiting 30 seconds before retry..."
                  sleep 30
                fi
                attempt=$((attempt + 1))
              fi
            done
            
            echo "üö® Failed to push $image after $max_attempts attempts"
            return 1
          }
          
          for svc in "${services[@]}"; do
            # V√©rifier que l'image existe
            if docker image inspect "${{ env.REGISTRY }}/$OWNER_LC/$svc:$TAG" > /dev/null 2>&1; then
              # Push avec retry
              push_with_retry "${{ env.REGISTRY }}/$OWNER_LC/$svc:$TAG" || echo "‚ö†Ô∏è Failed to push $svc:$TAG"
              push_with_retry "${{ env.REGISTRY }}/$OWNER_LC/$svc:latest" || echo "‚ö†Ô∏è Failed to push $svc:latest"
            else
              echo "‚ö†Ô∏è Image $svc:$TAG not found, skipping push"
            fi
          done

  # ===================================
  # 3. Security Scan (Trivy + SARIF)
  # ===================================
  security-scan:
    name: üîê Security Scan (SARIF)
    needs: docker-images
    if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      security-events: write
      checks: write
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        svc: 
          - jira-fetch-service
          - reporting-service
          - chart-service
          - email-service
          - excel-service
          - gateway-service
          - discovery-service
    
    steps:
      - name: üîê Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: üß† Set variables
        run: |
          TAG=${GITHUB_SHA::7}
          OWNER_LC=$(echo "${{ github.repository_owner }}" | tr '[:upper:]' '[:lower:]')
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "OWNER_LC=$OWNER_LC" >> $GITHUB_ENV

      - name: üîç Check if image exists
        id: check_image
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ matrix.svc }}:${{ env.TAG }}"
          if docker manifest inspect "$IMAGE" > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Image exists: $IMAGE"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  Image not found: $IMAGE"
          fi

      - name: üì¶ Cache Trivy DB
        if: steps.check_image.outputs.exists == 'true'
        uses: actions/cache@v4
        with:
          path: ~/.cache/trivy
          key: ${{ runner.os }}-trivy-db-${{ hashFiles('.github/workflows/*.yml') }}
          restore-keys: |
            ${{ runner.os }}-trivy-db-

      - name: üïµÔ∏è Scan ${{ matrix.svc }} (SARIF)
        if: steps.check_image.outputs.exists == 'true'
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/${{ matrix.svc }}:${{ env.TAG }}
          scan-type: image
          format: sarif
          output: trivy-${{ matrix.svc }}.sarif
          severity: CRITICAL,HIGH
          vuln-type: os,library
          scanners: vuln
          ignore-unfixed: true
          cache-dir: ~/.cache/trivy
          timeout: 10m

      - name: üì§ Upload SARIF to GitHub Security
        if: always() && steps.check_image.outputs.exists == 'true'
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-${{ matrix.svc }}.sarif
          category: ${{ matrix.svc }}

  # ===================================
  # 4. Publish Test Reports
  # ===================================
  publish-reports:
    name: üìä Publish Test Reports
    needs: [build-test]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    if: always() && needs.build-test.result != 'cancelled'
    
    steps:
      - name: ÔøΩ Checkout code
        uses: actions/checkout@v4

      - name: ÔøΩüì• Download test reports
        uses: actions/download-artifact@v4
        with:
          name: test-reports-${{ github.run_id }}
          path: reports
        continue-on-error: true

      - name: üîç Check test reports
        id: check_reports
        run: |
          if [ -d "reports" ] && [ "$(find reports -name 'TEST-*.xml' | wc -l)" -gt 0 ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Found $(find reports -name 'TEST-*.xml' | wc -l) test report(s)"
            find reports -name 'TEST-*.xml' | head -5
          else
            echo "found=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è  No test reports found"
            ls -la reports/ 2>/dev/null || echo "Reports directory doesn't exist"
          fi

      - name: üìä Publish JUnit Report
        if: steps.check_reports.outputs.found == 'true'
        uses: dorny/test-reporter@v1
        with:
          name: üß™ Test Results
          path: reports/**/TEST-*.xml
          reporter: java-junit
          max-annotations: 10
          fail-on-error: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: üìã Test Summary
        if: always()
        run: |
          echo "## üìä Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_reports.outputs.found }}" = "true" ]; then
            echo "‚úÖ Test reports found and processed" >> $GITHUB_STEP_SUMMARY
            echo "üìä Total test files: $(find reports -name 'TEST-*.xml' 2>/dev/null | wc -l)" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ö†Ô∏è  No test reports found - check build-test job" >> $GITHUB_STEP_SUMMARY
          fi

  # D√©clencher Deploy apr√®s succ√®s
  trigger-deploy:
    name: üîó Trigger Deploy
    needs: [docker-images, security-scan]
    runs-on: ubuntu-latest
    if: success() && github.ref == 'refs/heads/main'
    
    steps:
      - name: Trigger Deploy Workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: context.ref
            });
            console.log('‚úÖ Deploy workflow triggered')