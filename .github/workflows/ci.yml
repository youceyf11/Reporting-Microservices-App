name: CI/CD - Reporting Logistics App

on:
  push:
    branches: ["**"]
    tags: ["*"]
  pull_request:
    branches: ["**"]

env:
  REGISTRY: ghcr.io
  JAVA_VERSION: '17'

permissions:
  contents: read
  packages: write

jobs:
  build-test:
    name: Build and Test
    runs-on: ubuntu-latest

    services:
      zookeeper:
        image: bitnami/zookeeper:3
        env:
          ALLOW_ANONYMOUS_LOGIN: "yes"
        ports:
          - 2181:2181    
        options: >-
          --health-cmd="nc -z 127.0.0.1 2181"
          --health-interval=10s --health-timeout=5s --health-retries=12

      kafka:
        image: bitnami/kafka:3
        ports:
          - 9092:9092
        env:
          KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
          ALLOW_PLAINTEXT_LISTENER: "yes"
        options: >-
          --health-cmd="kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"
          --health-interval=10s --health-timeout=5s --health-retries=12

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping || exit 1"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=12

      rabbitmq:
        image: rabbitmq:3-management
        env:
          RABBITMQ_DEFAULT_USER: ci
          RABBITMQ_DEFAULT_PASS: ci
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd="rabbitmq-diagnostics -q ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=12

      postgres:
        image: postgres:16
        env:
          POSTGRES_DB: jira_db
          POSTGRES_USER: jira
          POSTGRES_PASSWORD: secret
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U jira -d jira_db"
          --health-interval=10s --health-timeout=5s --health-retries=20

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven

      - name: Wait for services
        run: |
          for i in {1..60}; do
            nc -z localhost 2181 \
            && nc -z localhost 9092 \
            && nc -z localhost 6379 \
            && nc -z localhost 5672 \
            && nc -z localhost 5432 \
            && break
            echo "waiting for zookeeper/kafka/redis/rabbitmq/postgres... ($i)"
            sleep 2
          done

      - name: Build + tests
        run: mvn -B -Dspring.profiles.active=ci -Ddependency-check.skip=true verify

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-and-jacoco
          path: |
            **/target/surefire-reports/*.xml
            **/target/failsafe-reports/*.xml
            **/target/site/jacoco/*.xml

  docker-images:
    name: Build and Push Docker Images
    needs: build-test
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ env.JAVA_VERSION }}
          cache: maven
          
      - name: Build JARs
        run: mvn -B -DskipTests package
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Build & push multi-module images
        run: |
          TAG=${GITHUB_SHA::7}
          OWNER=${{ github.repository_owner }}
          OWNER=${OWNER,,}  # Convert to lowercase
          for svc in jira-fetch-service reporting-service chart-service email-service excel-service gateway-service discovery-service; do
            echo "Building and pushing $svc..."
            docker build \
              -t ${{ env.REGISTRY }}/${OWNER}/${svc}:${TAG} \
              -t ${{ env.REGISTRY }}/${OWNER}/${svc}:${GITHUB_SHA} \
              -t ${{ env.REGISTRY }}/${OWNER}/${svc}:latest \
              ./${svc}
            docker push ${{ env.REGISTRY }}/${OWNER}/${svc}:${TAG}
            docker push ${{ env.REGISTRY }}/${OWNER}/${svc}:${GITHUB_SHA}
            docker push ${{ env.REGISTRY }}/${OWNER}/${svc}:latest
          done

  trivy-scan:
    name: Security Scan
    needs: docker-images
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        svc: [jira-fetch-service, reporting-service, chart-service, email-service, excel-service, gateway-service, discovery-service]
    steps:
      - name: Trivy scan ${{ matrix.svc }}
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ matrix.svc }}:${{ github.sha }}
          format: table
          vuln-type: os,library
          severity: CRITICAL,HIGH
          exit-code: '1'